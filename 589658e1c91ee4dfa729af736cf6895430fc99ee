{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a2fbd08e_b3239d8d",
        "filename": "cmd/upsync/upsync.go",
        "patchSetId": 1
      },
      "lineNbr": 219,
      "author": {
        "id": 5307
      },
      "writtenOn": "2021-06-03T04:36:15Z",
      "side": 0,
      "message": "I agree 50 is too small; I tried to change it to 150 in the patch below (created a long time ago) but maybe the right answer is a flag that sets it. I have a few directories in my main upspin tree that have some very large files copied off the net which I choose not to keep in my upsync local caches, so I\u0027d almost rather set the threshold in my upspin config file rather than repeat at every command.\n\nThe patch below added a -n flag, analogous to make -n, to help you assess whether upsync is about to do is what you intend. I created it for the issue of big files but the change has been even more useful in catching merge conflicts from two upsync client machines.\n\nTODO It would be good if the -n variant totaled the amount of new local disk space that will be consumed.\n\nIf we step back maybe we can see a better design that fixes all these problems. Ah, if only FUSE worked better on the OS that I use!\n\n\n\u003e var trialFlag \u003d flag.Bool(\"n\", false, \"don\u0027t actually copy files, only print what would have been done\")\n156c157,159\n\u003c       err \u003d ioutil.WriteFile(*upsyncFlag, []byte(getwd), 0644)\n---\n\u003e       if !*trialFlag {\n\u003e               err \u003d ioutil.WriteFile(*upsyncFlag, []byte(getwd), 0644)\n\u003e       }\n204,206c207,215\n\u003c                               err \u003d os.Mkdir(pathname, 0700)\n\u003c                               if err !\u003d nil {\n\u003c                                       return err\n---\n\u003e                               if !*trialFlag {\n\u003e                                       err \u003d os.Mkdir(pathname, 0700)\n\u003e                                       if err !\u003d nil {\n\u003e                                               return err\n\u003e                                       }\n\u003e                                       err \u003d upsync(upc, wd, pathname+\"/\")\n\u003e                                       if err !\u003d nil {\n\u003e                                               return err\n\u003e                                       }\n208,211d216\n\u003c                               err \u003d upsync(upc, wd, pathname+\"/\")\n\u003c                               if err !\u003d nil {\n\u003c                                       return err\n\u003c                               }\n213,217c218,224\n\u003c                               fmt.Println(\"permission problem; creating placeholder \", pathname)\n\u003c                               empty :\u003d make([]byte, 0)\n\u003c                               err \u003d ioutil.WriteFile(pathname, empty, 0)\n\u003c                               if err !\u003d nil {\n\u003c                                       return err\n---\n\u003e                               if !*trialFlag {\n\u003e                                       fmt.Println(\"permission problem; creating placeholder \", pathname)\n\u003e                                       empty :\u003d make([]byte, 0)\n\u003e                                       err \u003d ioutil.WriteFile(pathname, empty, 0)\n\u003e                                       if err !\u003d nil {\n\u003e                                               return err\n\u003e                                       }\n219c226\n\u003c                       case len(udir[uj].Blocks) \u003e 50:\n---\n\u003e                       case len(udir[uj].Blocks) \u003e 150:\n295,297c302,311\n\u003c       err \u003d ioutil.WriteFile(pathname, bytes, 0600)\n\u003c       if err !\u003d nil {\n\u003c               return err\n---\n\u003e       if !*trialFlag {\n\u003e               err \u003d ioutil.WriteFile(pathname, bytes, 0600)\n\u003e               if err !\u003d nil {\n\u003e                       return err\n\u003e               }\n\u003e               mtime :\u003d time.Unix(utime, 0)\n\u003e               err \u003d os.Chtimes(pathname, mtime, mtime)\n\u003e               if err !\u003d nil {\n\u003e                       return err\n\u003e               }\n299,303d312\n\u003c       mtime :\u003d time.Unix(utime, 0)\n\u003c       err \u003d os.Chtimes(pathname, mtime, mtime)\n\u003c       if err !\u003d nil {\n\u003c               return err\n\u003c       }\n314,325c323,336\n\u003c       bytes, err :\u003d ioutil.ReadFile(pathname)\n\u003c       if err !\u003d nil {\n\u003c               return err\n\u003c       }\n\u003c       path :\u003d upspin.PathName(wd + \"/\" + pathname)\n\u003c       _, err \u003d upc.Put(path, bytes)\n\u003c       if err !\u003d nil {\n\u003c               return err\n\u003c       }\n\u003c       err \u003d upc.SetTime(path, upspin.Time(ltime))\n\u003c       if err !\u003d nil {\n\u003c               return err\n---\n\u003e       if !*trialFlag {\n\u003e               bytes, err :\u003d ioutil.ReadFile(pathname)\n\u003e               if err !\u003d nil {\n\u003e                       return err\n\u003e               }\n\u003e               path :\u003d upspin.PathName(wd + \"/\" + pathname)\n\u003e               _, err \u003d upc.Put(path, bytes)\n\u003e               if err !\u003d nil {\n\u003e                       return err\n\u003e               }\n\u003e               err \u003d upc.SetTime(path, upspin.Time(ltime))\n\u003e               if err !\u003d nil {\n\u003e                       return err\n\u003e               }\n\nand the commit message was going to be:\n\ncmd/upsync: change threshold to 150MB, add trialFlag\n\nExperience has shown 150MB is a better threshold for \"big\" than 50MB.\nTo make it safer to test the effect an upsync will have, add a -n\nflag, similar to rsync and other Unix commands, that prints commands\nas usual but doesn\u0027t actually execute them.",
      "revId": "589658e1c91ee4dfa729af736cf6895430fc99ee",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03"
    }
  ]
}